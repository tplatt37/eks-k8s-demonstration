# Secret: https://kubernetes.io/docs/concepts/configuration/secret/
#
# Create a simple secret and access it in a pod
# https://kubernetes.io/docs/concepts/configuration/secret
#
# OPTIONAL: Show how the base64 value was created
# echo -n "Hey! Here's my secret: \$!#@%^&*." | base64 
# echo SGV5ISBIZXJlJ3MgbXkgc2VjcmV0OiAkISNAJV4mKi4= | base64 -d
#
# k apply -f secret-pod.yaml
# k exec -it pods/secret-demo -- /bin/sh
# env
# ls -lha /var/app
# cat /var/app/PASSWORD
#
# The volume mounted secret will reflect any new/updated values!
# To demonstrate this, follow the steps above to show the original value
#
# In another terminal window...
# Edit the YAML and change the secret value to:
# Tm93IGl0J3MgdXBkYXRlZAo=
#
# k get secret/secret-password -o yaml > test.yaml
# (edit test.yaml)
# k apply -f test.yaml
#
# In the /bin/sh window
# ls -lha /var/app
# Note that time stamp changes for the ..data item!
# (It takes 5-6 seconds before it shows as updated - it is described as "eventually consistent", 
# kubelet is using k8s 'watch' operation to look for changes.)
#
# cat /var/app/PASSWORD
#
#
# NOTE: The secret is automatically decoded from base64.
# If using EKS, the Secret is encrypted at rest in the etcd ebs volume.
# Optionally, you can use KMS keys to encrypt the value within etcd database.
#
apiVersion: v1
kind: Secret
metadata:
  name: secret-password
# Opaque=arbitrary user-defined data. This is the default type if not specified.
# Other types includ basic-auth, ssh-auth (for private key), tls (for cert and key), token, service-account-token, etc.
# See: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
# This is equivalent to "generic" when creating a secret via : kubectl create secret generic empty-secret
type: opaque
#
# Use data: to provide base64 encoded, use stringData to specify plain string
data:
  # This is base64 encoding - NOT ENCRYPTION
  # Decode with:
  # echo SGV5ISBIZXJlJ3MgbXkgc2VjcmV0OiAkISNAJV4mKi4= | base64 -d
  # echo Tm93IGl0J3MgdXBkYXRlZAo= | base64 -d
  #
  PASSWORD: SGV5ISBIZXJlJ3MgbXkgc2VjcmV0OiAkISNAJV4mKi4=
---
apiVersion: v1
kind: Pod
metadata:
  name: secret-demo
spec:
  containers:
  - image: nginx:1.19.0
    name: app
    # 
    # Access as an ENVIRONMENT variable
    # This is considered OK, but not great.
    # If the program runs "env" or "export" that may dump the secret value to log output!
    # Also -there's no way to hot reload - the value is set at the time the pod is created.
    #
    envFrom:
    - secretRef:
        name: secret-password
    #
    # Mount a volume - secret can be accessed like a file in a filesystem.
    # This is especially handy for ssh private-key, etc.  
    # This file system is tmpfs - it's RAM backed!
    # 
    # Additionally, k8s will update the value when the secret is updated - unlike an Environment Variable
    # (However the container code must watch the filesystem and periodically read the file again to
    # get the new secret)
    #
    volumeMounts:
    - name: secret-volume
      mountPath: /var/app
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: secret-password
