apiVersion: v1
kind: Service
metadata:
  # NOTE: Best practice with a helm chart is to specify namespace using --namespace option
  namespace: "{{ .Release.Namespace }}"
  name: {{ .Release.Name }}-nlb

  # These annotations ensure that the AWS Load Balancer Controller will handle provisioning , as opposed to the in-tree controller (which is deprecated)
  # See here: https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.
  # As of AWS Load Balancer 2.5.0 - any "LoadBalancer" service will result in an NLB by default.
  annotations:

    # See: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/annotations/
    service.beta.kubernetes.io/aws-load-balancer-type: external
    #
    # Can be ip (individual Pod IPs) or instance (NodePorts on the worker nodes)
    # instance mode works better for demos - the targets (nodeports) are stable, whereas with ip mode you have pod ips that
    # are transient - and you have to carefully coordinate pod shutdown, deregistration delay, health checks etc.
    # NOTE: If deploying to Fargate, target-type must be ip. Fargate doesn't support instance mode.
    # 
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

    # New with AWS LB Controller 1.26.0 - Security Groups are supported with NLBSs
    # This is the default, but I'm stating it explicitly here as a talking point.
    # You can use dynamically generated SGs (as we are doing here), or your own
    service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: "true"
    # You can specify source ranges here, but this is deprecated in favor of loadBalancerSourceRanges
    #service.beta.kubernetes.io/load-balancer-source-ranges: 10.0.0.0/24
    # Use your own SGs:
    #service.beta.kubernetes.io/aws-load-balancer-security-groups: sg-xxxx, nameOfSg1, nameOfSg2

spec:
  type: LoadBalancer
  
  selector:
    app: hello-world
  
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  