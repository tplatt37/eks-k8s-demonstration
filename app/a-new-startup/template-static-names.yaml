AWSTemplateFormatVersion: '2010-09-09'
Description: "A-New-Startup - Backend services needed by the code - DDB/SNS/SQS/IAM Policy"

# All the AWS services required by the a-new-startup code.
#
# Use this template if you want STATICALLY NAMED resources. "a-new-startup-dev" table, etc.
#
# This makes it easier to demonstrate the application code as a "local build" on Cloud9 , for example.
# These statically named resources will peacefully co-exist with the ones using dynamic names that the CI/CD pipeline will create.
#
# To install:
# aws cloudformation deploy --template-file template-static-names.yaml --stack-name a-new-startup-static 
#
#
# Please note that no IAM Policies are created here.  I assume if you are using this, you are doing a "local build"
# and you are running with sufficient permissions to DDB PutItem, etc.
#

Resources:
  StartupSignupsTable:
    Type: AWS::DynamoDB::Table
    # A simple key/value table to store the info for anyone interested in our startup.
    Properties:
      TableName: 'a-new-startup-dev'
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        -
          AttributeName: email
          AttributeType: S
      KeySchema:
        - 
          AttributeName: email
          KeyType: HASH 

  # This doesn't really get used at all
  # But it was in the original project... 
  NewSignupQueue: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'a-new-startup-dev'
  
  # The code will publish a message to this topic, but ONLY if the code is 
  # given the ARN via an environment variable. See app.js for details
  NewSignupTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'a-new-startup-dev'
      Subscription:
      - Endpoint:
          Fn::GetAtt: [NewSignupQueue, Arn]
        Protocol: sqs

  AllowSNS2SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: PublicationPolicy
        Statement:
        - Action: ['sqs:SendMessage']
          Condition:
            ArnEquals:
              aws:SourceArn: {Ref: NewSignupTopic}
          Effect: Allow
          Principal: {AWS: '*'}
          Resource:
            Fn::GetAtt: [NewSignupQueue, Arn]
          Sid: Allow-SNS-SendMessage
        Version: '2012-10-17'
      Queues:
      - {Ref: NewSignupQueue}
  
  #
  # NOTE: The following are referenced by the scripts/start_server script.
  # When running running on EC2, the CodeDeploy agent will execute that as a hook.
  #
  
  SSMParamAccount:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /a-new-startup/local/aws-account
      Type: String
      Value: !Ref AWS::AccountId
      Tags:
        demo: a-new-startup

  SSMParamTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /a-new-startup/local/tablename
      Type: String
      Value: !Ref StartupSignupsTable
      Tags:
        demo: a-new-startup

  SSMParamTopic:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /a-new-startup/local/topicarn
      Type: String
      Value: !Ref NewSignupTopic
      Tags:
        demo: a-new-startup

  # IAM Identity Policy - Use this with EC2 Instance Role, or whereever you need it.
  AppManagedPolicy:
      Type: AWS::IAM::ManagedPolicy
      # Basic application level permissions needed for a-new-startup to run.
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'
              Resource:
                - Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":dynamodb:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      # Note how we use wildcards.  The backend resource names must start with a-new-startup
                      - :table/a-new-startup*
            - Effect: Allow
              Action:
                - 'ssm:GetParameter*'
              Resource:
                - Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":ssm:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :parameter/a-new-startup*
            - Effect: Allow
              Action:
                - 'sns:Publish'
              Resource:
                - Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":sns:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :a-new-startup*
            # If using X-Ray, the Daemon will need these permissions to upload data to cloud.
            - Effect: Allow
              Action: 
                - "xray:PutTraceSegments"
                - "xray:PutTelemetryRecords"
                - "xray:GetSamplingRules"
                - "xray:GetSamplingTargets"
                - "xray:GetSamplingStatisticSummaries"
              Resource: "*"

Outputs:

  TableName:
    Value: !Ref StartupSignupsTable

  TopicArn:
    Value: !Ref NewSignupTopic

  QueueArn:
    Value: !GetAtt NewSignupQueue.Arn

  PolicyArn:
    Value: !Ref AppManagedPolicy
